{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Italic;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red98\green151\blue85;\red43\green43\blue43;\red204\green120\blue50;
\red169\green183\blue198;\red152\green118\blue170;\red128\green128\blue128;\red168\green192\blue35;\red255\green198\blue109;
\red104\green151\blue187;\red106\green135\blue89;}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c38431\c59216\c33333;\csgenericrgb\c16863\c16863\c16863;\csgenericrgb\c80000\c47059\c19608;
\csgenericrgb\c66275\c71765\c77647;\csgenericrgb\c59608\c46275\c66667;\csgenericrgb\c50196\c50196\c50196;\csgenericrgb\c65882\c75294\c13725;\csgenericrgb\c100000\c77647\c42745;
\csgenericrgb\c40784\c59216\c73333;\csgenericrgb\c41569\c52941\c34902;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\i\fs24 \cf2 \cb3 /**\uc0\u8232  * a. Sai Ram Thota\u8232  * b. CS 4323\u8232  * c. Phase One\u8232  * d. 9/11/2016\u8232  * e. I have used this "tTime", for keeping tracj of termination time.\u8232  *\u8232  *     stat is an arralyList of all the jobs that have encountered. It is printed at the end.\u8232  *\u8232  * Dispatch just dispatches all the jobs in PCB in FCFS order and terminates the next.\u8232  */\u8232 \u8232 
\f1\i0 \cf4 import \cf5 java.util.ArrayList\cf4 ;\uc0\u8232 import \cf5 java.util.HashMap\cf4 ;\uc0\u8232 \u8232 \u8232 public class \cf5 J_DISPATCH \{\uc0\u8232 \u8232     \cf4 public static \cf5 ArrayList<PCB> 
\f0\i \cf6 p0List 
\f1\i0 \cf5 = \cf4 new \cf5 ArrayList<PCB>()\cf4 ;\uc0\u8232     public static \cf5 ArrayList<PCB> 
\f0\i \cf6 p1List 
\f1\i0 \cf5 = \cf4 new \cf5 ArrayList<PCB>()\cf4 ;\uc0\u8232     public static \cf5 ArrayList<PCB> 
\f0\i \cf6 p2List 
\f1\i0 \cf5 = \cf4 new \cf5 ArrayList<PCB>()\cf4 ;\uc0\u8232     public static \cf5 ArrayList<PCB> 
\f0\i \cf6 p3List 
\f1\i0 \cf5 = \cf4 new \cf5 ArrayList<PCB>()\cf4 ;\uc0\u8232     public static \cf5 ArrayList<PCB> 
\f0\i \cf6 p4List 
\f1\i0 \cf5 = \cf4 new \cf5 ArrayList<PCB>()\cf4 ;\uc0\u8232     public static \cf5 ArrayList<PCB> 
\f0\i \cf6 p5List 
\f1\i0 \cf5 = \cf4 new \cf5 ArrayList<PCB>()\cf4 ;\uc0\u8232 \u8232     \cf7 //
\f0\i \cf8 TODO: try implementing hashmap\uc0\u8232     
\f1\i0 \cf4 public static \cf5 HashMap<Integer\cf4 ,\cf5 ArrayList> 
\f0\i \cf6 priorityQueue 
\f1\i0 \cf5 = \cf4 new \cf5 HashMap<Integer\cf4 , \cf5 ArrayList>()\cf4 ;\uc0\u8232 \u8232 \u8232 \u8232     public \cf9 J_DISPATCH\cf5 (PCB job)\uc0\u8232     \{\u8232         \cf4 switch\cf5 (job.getClassNum())\uc0\u8232         \{\u8232             \cf4 case \cf10 1\cf5 : 
\f0\i \cf6 p0List
\f1\i0 \cf5 .add(job)\cf4 ;break;\uc0\u8232             case \cf10 2\cf5 : 
\f0\i \cf6 p1List
\f1\i0 \cf5 .add(job)\cf4 ;break;\uc0\u8232             case \cf10 3\cf5 : 
\f0\i \cf6 p5List
\f1\i0 \cf5 .add(job)\cf4 ;break;\uc0\u8232             default\cf5 : System.
\f0\i \cf6 out
\f1\i0 \cf5 .print(\cf11 "Error! PCB: " \cf5 + job)\cf4 ;\uc0\u8232         \cf5 \}\uc0\u8232     \}\u8232 \u8232     \cf4 public static void \cf9 dispatchAllJobsInSubQueuesBasedOnPriority\cf5 ()\uc0\u8232     \{\u8232         \cf4 while\cf5 (
\f0\i \cf6 p5List
\f1\i0 \cf5 .size()!=\cf10 0\cf5 )\uc0\u8232         \{\u8232             \cf4 for\cf5 (\cf4 int \cf5 i=\cf10 0\cf4 ; \cf5 i<
\f0\i \cf6 p5List
\f1\i0 \cf5 .size()\cf4 ; \cf5 i++)\uc0\u8232             \{\u8232                 
\f0\i read
\f1\i0 (
\f0\i \cf6 p5List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232 \u8232                 if\cf5 (
\f0\i \cf6 p5List
\f1\i0 \cf5 .get(i).getpTime() <= 
\f0\i \cf6 p5List
\f1\i0 \cf5 .get(i).getQuantumNum())\uc0\u8232                 \{\u8232                     \cf4 new \cf5 J_TERM(
\f0\i \cf6 p5List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p5List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232             \}\u8232         \}\u8232 \u8232         \cf4 while \cf5 (
\f0\i \cf6 p4List
\f1\i0 \cf5 .size()!=\cf10 0\cf5 )\uc0\u8232         \{\u8232             \cf7 //if balanced or cpu increase\uc0\u8232             \cf4 for\cf5 (\cf4 int \cf5 i =\cf10 0\cf4 ; \cf5 i< 
\f0\i \cf6 p4List
\f1\i0 \cf5 .size()\cf4 ; \cf5 i++)\uc0\u8232             \{\u8232                 
\f0\i read
\f1\i0 (
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232 \u8232                 \cf7 //Check and Terminate\uc0\u8232                 \cf4 if\cf5 (
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i).getpTime() <= 
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i).getQuantumNum())\uc0\u8232                 \{\u8232                     \cf4 new \cf5 J_TERM(
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p4List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232 \u8232                 \cf5 \}\uc0\u8232                 \cf4 else if\cf5 (
\f0\i canIncrementPriority
\f1\i0 (
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i)))\uc0\u8232                 \{\u8232                     
\f0\i incrementPriority
\f1\i0 (
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p5List
\f1\i0 \cf5 .add(
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p4List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                     return;\u8232                 \cf5 \}\uc0\u8232                 \cf4 else\uc0\u8232                 \cf5 \{\uc0\u8232                     \cf7 //
\f0\i \cf8 TODO: check, job.getVirtualTime != 0 then inncrement priority FOR ALL\uc0\u8232                     
\f1\i0 \cf5 System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Error! job: " \cf5 + 
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     \cf5 System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Sizes: io: " \cf5 + J_SCHED.
\f0\i \cf6 ioBoundQueue
\f1\i0 \cf5 .size()+ \cf11 " cpu: " \cf5 + J_SCHED.
\f0\i \cf6 cpuBoundQueue
\f1\i0 \cf5 .size()\uc0\u8232                             + \cf11 " bQ: "\cf5 +J_SCHED.
\f0\i \cf6 balancedQueue
\f1\i0 \cf5 .size())\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232 \u8232                 \cf4 if\cf5 (
\f0\i \cf6 p4List
\f1\i0 \cf5 .size()>\cf10 0\cf5 ) \{\uc0\u8232                     
\f0\i decrementPriority
\f1\i0 (
\f0\i \cf6 p4List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232             \}\u8232 \u8232         \}\u8232 \u8232         \cf4 while\cf5 (
\f0\i \cf6 p3List
\f1\i0 \cf5 .size()!=\cf10 0\cf5 )\uc0\u8232         \{\u8232             \cf4 for\cf5 (\cf4 int \cf5 i=\cf10 0\cf4 ; \cf5 i< 
\f0\i \cf6 p3List
\f1\i0 \cf5 .size()\cf4 ; \cf5 i++)\uc0\u8232             \{\u8232                 
\f0\i read
\f1\i0 (
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232 \u8232                 if\cf5 (
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i).getpTime() <= 
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i).getQuantumNum())\uc0\u8232                 \{\u8232                     \cf4 new \cf5 J_TERM(
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p3List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232                 \cf4 else if\cf5 (
\f0\i canIncrementPriority
\f1\i0 (
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i)))\uc0\u8232                 \{\u8232                     
\f0\i incrementPriority
\f1\i0 (
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p4List
\f1\i0 \cf5 .add(
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p3List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                     return;\u8232                 \cf5 \}\uc0\u8232                 \cf4 else\uc0\u8232                 \cf5 \{\uc0\u8232                     System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Error! job: " \cf5 + 
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     \cf5 System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Sizes: io: " \cf5 + J_SCHED.
\f0\i \cf6 ioBoundQueue
\f1\i0 \cf5 .size()+ \cf11 " cpu: " \cf5 + J_SCHED.
\f0\i \cf6 cpuBoundQueue
\f1\i0 \cf5 .size()\uc0\u8232                             + \cf11 " bQ: "\cf5 +J_SCHED.
\f0\i \cf6 balancedQueue
\f1\i0 \cf5 .size())\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232                 \cf4 if\cf5 (
\f0\i \cf6 p3List
\f1\i0 \cf5 .size()>\cf10 0\cf5 )\uc0\u8232                     
\f0\i decrementPriority
\f1\i0 (
\f0\i \cf6 p3List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232 \u8232             \cf5 \}\uc0\u8232         \}\u8232 \u8232         \cf4 while\cf5 (
\f0\i \cf6 p2List
\f1\i0 \cf5 .size()!=\cf10 0\cf5 )\uc0\u8232         \{\u8232             \cf4 for\cf5 (\cf4 int \cf5 i=\cf10 0\cf4 ; \cf5 i< 
\f0\i \cf6 p2List
\f1\i0 \cf5 .size()\cf4 ; \cf5 i++)\uc0\u8232             \{\u8232                 
\f0\i read
\f1\i0 (
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232 \u8232                 if\cf5 (
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i).getpTime() <= 
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i).getQuantumNum())\uc0\u8232                 \{\u8232                     \cf4 new \cf5 J_TERM(
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p2List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232                 \cf4 else if\cf5 (
\f0\i canIncrementPriority
\f1\i0 (
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i)))\uc0\u8232                 \{\u8232                     
\f0\i incrementPriority
\f1\i0 (
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p3List
\f1\i0 \cf5 .add(
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p2List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                     return;\u8232                 \cf5 \}\uc0\u8232                 \cf4 else\uc0\u8232                 \cf5 \{\uc0\u8232                     System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Error! job: " \cf5 + 
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     \cf5 System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Sizes: io: " \cf5 + J_SCHED.
\f0\i \cf6 ioBoundQueue
\f1\i0 \cf5 .size()+ \cf11 " cpu: " \cf5 + J_SCHED.
\f0\i \cf6 cpuBoundQueue
\f1\i0 \cf5 .size()\uc0\u8232                             + \cf11 " bQ: "\cf5 +J_SCHED.
\f0\i \cf6 balancedQueue
\f1\i0 \cf5 .size())\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232 \u8232                 \cf4 if\cf5 (
\f0\i \cf6 p2List
\f1\i0 \cf5 .size()>\cf10 0\cf5 ) \{\uc0\u8232                     
\f0\i decrementPriority
\f1\i0 (
\f0\i \cf6 p2List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232             \}\u8232         \}\u8232 \u8232         \cf4 while\cf5 (
\f0\i \cf6 p1List
\f1\i0 \cf5 .size()!=\cf10 0\cf5 )\uc0\u8232         \{\u8232             \cf4 for \cf5 (\cf4 int \cf5 i = \cf10 0\cf4 ; \cf5 i < 
\f0\i \cf6 p1List
\f1\i0 \cf5 .size()\cf4 ; \cf5 i++)\uc0\u8232             \{\u8232                 
\f0\i read
\f1\i0 (
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232 \u8232                 if\cf5 (
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i).getpTime() <= 
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i).getQuantumNum())\uc0\u8232                 \{\u8232                     \cf4 new \cf5 J_TERM(
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p1List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232                 \cf4 else if\cf5 (
\f0\i canIncrementPriority
\f1\i0 (
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i)))\uc0\u8232                 \{\u8232                     
\f0\i incrementPriority
\f1\i0 (
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p2List
\f1\i0 \cf5 .add(
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p1List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                     return;\u8232                 \cf5 \}\uc0\u8232                 \cf4 else\uc0\u8232                 \cf5 \{\uc0\u8232                     System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Error! job: " \cf5 + 
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i) +\cf11 " vTime"\cf5 + 
\f0\i \cf6 p1List
\f1\i0 \cf5 .get(i).getVirtualTime())\cf4 ;\uc0\u8232                     \cf5 System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Sizes: io: " \cf5 + J_SCHED.
\f0\i \cf6 ioBoundQueue
\f1\i0 \cf5 .size()+ \cf11 " cpu: " \cf5 + J_SCHED.
\f0\i \cf6 cpuBoundQueue
\f1\i0 \cf5 .size()\uc0\u8232                             + \cf11 " bQ: "\cf5 +J_SCHED.
\f0\i \cf6 balancedQueue
\f1\i0 \cf5 .size())\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232 \u8232             \}\u8232         \}\u8232 \u8232         \cf4 while\cf5 (
\f0\i \cf6 p0List
\f1\i0 \cf5 .size()!=\cf10 0\cf5 )\uc0\u8232         \{\u8232             \cf4 for \cf5 (\cf4 int \cf5 i = \cf10 0\cf4 ; \cf5 i < 
\f0\i \cf6 p0List
\f1\i0 \cf5 .size()\cf4 ; \cf5 i++)\uc0\u8232             \{\u8232                 
\f0\i read
\f1\i0 (
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232 \u8232                 if\cf5 (
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i).getpTime() <= 
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i).getQuantumNum())\uc0\u8232                 \{\u8232                     \cf4 new \cf5 J_TERM(
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p0List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232                 \cf4 else if\cf5 (
\f0\i canIncrementPriority
\f1\i0 (
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i)))\uc0\u8232                 \{\u8232                     
\f0\i incrementPriority
\f1\i0 (
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p1List
\f1\i0 \cf5 .add(
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     
\f0\i \cf6 p0List
\f1\i0 \cf5 .remove(i)\cf4 ;\uc0\u8232                     return;\u8232                 \cf5 \}\uc0\u8232                 \cf4 else\uc0\u8232                 \cf5 \{\uc0\u8232 \u8232                     System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Error! job: " \cf5 + 
\f0\i \cf6 p0List
\f1\i0 \cf5 .get(i))\cf4 ;\uc0\u8232                     \cf5 System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Sizes: io: " \cf5 + J_SCHED.
\f0\i \cf6 ioBoundQueue
\f1\i0 \cf5 .size()+ \cf11 " cpu: " \cf5 + J_SCHED.
\f0\i \cf6 cpuBoundQueue
\f1\i0 \cf5 .size()\uc0\u8232                             + \cf11 " bQ: "\cf5 +J_SCHED.
\f0\i \cf6 balancedQueue
\f1\i0 \cf5 .size())\cf4 ;\uc0\u8232                 \cf5 \}\uc0\u8232             \}\u8232         \}\u8232 \u8232 \cf7 //        else \{\uc0\u8232 //            System.out.print("Error! Check J_DISPATCH!");\u8232 //        \}\u8232     \cf5 \}\uc0\u8232 \u8232 \u8232     \cf7 //onlyCalledByDispatchAll\uc0\u8232     \cf4 public static void \cf9 readAllJobsToCPU\cf5 (ArrayList<PCB> tempList)\uc0\u8232     \{\u8232         \cf4 for\cf5 (\cf4 int \cf5 i = \cf10 0\cf4 ; \cf5 i < tempList.size()\cf4 ; \cf5 i++)\uc0\u8232         \{\u8232             
\f0\i read
\f1\i0 (tempList.get(i))\cf4 ;\uc0\u8232         \cf5 \}\uc0\u8232     \}\u8232 \u8232     \cf4 public static boolean \cf9 canIncrementPriority\cf5 (PCB job)\uc0\u8232     \{\u8232         \cf4 boolean \cf5 result = \cf4 false;\uc0\u8232 \u8232         int \cf5 vTime = SYSTEM.
\f0\i \cf6 systemClock 
\f1\i0 \cf5 - job.getVirtualTime()\cf4 ;\uc0\u8232 \u8232         if\cf5 (job.getClassNum()==\cf10 2 \cf5 && vTime >=\cf10 400\cf5 )\uc0\u8232         \{\u8232             result = \cf4 true;\uc0\u8232         \cf5 \}\uc0\u8232         \cf4 else if\cf5 (job.getClassNum()==\cf10 1 \cf5 && vTime >=\cf10 600\cf5 )\uc0\u8232         \{\u8232             result = \cf4 true;\uc0\u8232         \cf5 \}\uc0\u8232         \cf4 else\uc0\u8232         \cf5 \{\uc0\u8232             System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Error! job : " \cf5 + job)\cf4 ;\uc0\u8232         \cf5 \}\uc0\u8232         \cf4 return \cf5 result\cf4 ;\uc0\u8232     \cf5 \}\uc0\u8232 \u8232     \cf4 public static void \cf9 incrementPriority\cf5 (PCB tempJob)\{\uc0\u8232         \cf7 //
\f0\i \cf8 TODO: base on VTU update the priorities\uc0\u8232 \u8232         
\f1\i0 \cf4 if\cf5 (tempJob.getPriorityNum() == \cf10 4\cf5 )\uc0\u8232         \{\u8232             tempJob.setPriorityNum(\cf10 5\cf5 )\cf4 ;\uc0\u8232             \cf5 tempJob.setClassNum(\cf10 3\cf5 )\cf4 ; \cf7 //changing to IO class  //might have to add the number for STAT\uc0\u8232         \cf5 \}\uc0\u8232         \cf4 else if\cf5 (tempJob.getPriorityNum() < \cf10 4\cf5 )\uc0\u8232         \{\u8232             tempJob.setPriorityNum(tempJob.getPriorityNum()+\cf10 1\cf5 )\cf4 ;\uc0\u8232         \cf5 \}\uc0\u8232     \}\u8232 \u8232     \cf4 public static void \cf9 decrementPriority\cf5 (PCB tempJob)\{\uc0\u8232 \u8232             \cf4 if \cf5 (tempJob.getClassNum() == \cf10 1\cf5 ) \{\uc0\u8232                 tempJob.setPriorityNum(tempJob.getPriorityNum() - \cf10 1\cf5 )\cf4 ;\uc0\u8232             \cf5 \} \cf4 else if \cf5 (tempJob.getClassNum() == \cf10 2\cf5 ) \{\uc0\u8232                 tempJob.setPriorityNum(tempJob.getPriorityNum() - \cf10 1\cf5 )\cf4 ;\uc0\u8232             \cf5 \} \cf4 else \cf5 \{\uc0\u8232                 System.
\f0\i \cf6 out
\f1\i0 \cf5 .println(\cf11 "Error!!!!! job : " \cf5 + tempJob)\cf4 ;\uc0\u8232             \cf5 \}\uc0\u8232 \u8232     \}\u8232 \u8232     \cf4 public static void \cf9 read\cf5 (PCB job)\uc0\u8232     \{\u8232          \cf4 new \cf5 CPU(job)\cf4 ;\uc0\u8232     \cf5 \}\uc0\u8232 \u8232 \cf7 //    public static void checkAndTerminate(ArrayList<PCB> jobList, ArrayList<PCB> nextJList)\uc0\u8232 //    \{\u8232 //        for(int i =0; i<jobList.size(); i++)\u8232 //        \{\u8232 //            if(jobList.get(i).getpTime() <= jobList.get(i).getQuantumNum())\u8232 //            \{\u8232 //                new J_TERM(jobList.get(i));\u8232 //            \}\u8232 //            else if(canIncrementPriority(jobList.get(i)))\u8232 //            \{\u8232 //                  incrementPriority(jobList.get(i));\u8232 //                  nextJList.add(jobList.get(i));\u8232 //                    jobList.remove(i);\u8232 //            \}\u8232 //            else\u8232 //            \{\u8232 //                System.out.println("Error! in check and Terminate job: " + jobList.get(i));\u8232 //            \}\u8232 //        \}\u8232 //    \}\u8232 \u8232 \u8232 \cf5 \}\uc0\u8232 \
}